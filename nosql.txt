// NoSql
1、NoSQL 可以水平扩展的原因有？
    (tips：NoSQL数据模型简单，没有事务支持，没有Join操作)
// Redis

1、Redis中渐进式rehash实现？
    (tips：避免了集中式rehash导致系统繁忙，将整个rehash过程均摊到每一次的GET PUT
     操作中，一步步完成)

2、Redis实现分布式lock的问题在于，如果某个持有锁的client因为GC或者IO操作suspend，
    在恢复后，没办法确认当前的锁状态，当然，在恢复执行后可以再次执行加锁操作，以
    确认是否持有锁，但是这没有完全避免GC和sleep的可能，还是会有可能持有一个过期的
    锁，然后写入非预期的数据。
    一种解决方案就是锁中带有一个单调递增的token，server只允许比当前记录的token大的client的
    写操作，之前因为sleep而过期的锁会被拒绝写入数据。
    当前redlock算法依赖于集群中的大多数返回加锁成功，但是当出现网络分区等异常场景时，
    算法没法保证加锁的正确性。



// Memcached



// Riak



// HBase
