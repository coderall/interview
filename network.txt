--- some popular network interview questions,mostly about TCP/IP ---
--- TCP/IP 常见网络面试 笔试题 ---

// IP

1、路由器可以隔离广播域吗？ 交换机可以隔离广播域吗？
	(tips：路由器可以，交换机不行)
	
2、什么是VLAN？
	(tips：虚拟局域网)
	
3、什么是VxLAN？
	(tips：扩展版的VLAN，具体作用后面再补充)

// UDP

1、UDP 可以使用connect吗？

2、UDP recvfrom 100字节，这时来了个 150字节的数据包，会发生什么？ 如果来了一个 80字节的数据包呢？

3、怎样明确知道对方收到了UDP数据包？

4、怎样用UDP来模拟TCP？

5、UDP怎么flush？

6、UDP包头长度多少，分别都有哪些字段，有什么用？

7、UDP最大发送长度是多少？需要分片吗？

8、UDP需要用到路径MTU吗？

9、UDP应用场景？现在有哪些知名软件在使用UDP？

10、epoll 中可以添加UDP socket 吗？

11、UDP socket 有缓冲区吗？如果有，怎么用？

12、UDP发送时，是一次send 一个数据包吗？
	(tips：大部分场景下是这样的，但是UDP也支持CORK和MSG_MORE选项，这时，UDP和TCP一样，
	send多次对应一个数据包)

// TCP

1、详细描述TCP三次握手过程，包括序列号，头部类型标识

2、第一个SYN包的序列号从哪来？

3、后面通信过程中的序列号怎么更新？是send一次 序列号+1 还是？

4、TCP端口号最大数量多少？应用程序能使用的有多少？

5、同一个客户端socket，是否可以同时连接多个服务端socket？

6、客户端可以创建多少个socket？(同一个IP地址)

7、epoll poll select 区别与联系？

8、epoll 中 LT ET 区别，使用场景？

9、EPOLL_ONESHOT 应用于哪种场景，作用是什么？

10、accept 惊群问题描述？怎么解决？（内核中解决方案，应用层解决方案）

11、time_wait 状态作用是什么？

12、怎样避免出现 time_wait

13、在不开启keep-alive机制的情况下，TCP连接建立后，在不发送数据的情况下，立即切断网线，双方会有感知吗？如果某一方发送数据，会有感知吗？

14、同一个IP，同一个端口号，可以分别创建一个UDP socket，一个TCP socket吗？

15、CLOSE_WAIT 状态出现在哪一端？

16、SYN blood 攻击原理 及 危害？

17、怎样防止 SYN blood？

18、大概解释下 SYN cookies 原理？

19、简单描述下 google 提出的 BBR 拥塞控制算法，所有内核版本都适用吗？

20、所有 TCP UDP 接收的数据是否 都 需要 考虑字节序转换？

21、TCP在哪些情况下会返回RST给对方？

22、有文章指出，epoll中使用了共享内存来完成文件描述符事件从内核态到用户态的拷贝，是这样吗？

23、处于ET模式的文件描述正在接收数据过程中，另一个文件描述符的数据到来，会有什么效果？之前的接收会中断吗？为什么？

24、什么是RTT？什么是 SRTT？ 什么是 RTO？这三者有什么关系？

25、什么是 TSO？ 对于数据的传输过程有什么影响？需要考虑哪些因素？
	(tips：TCP Segment offload，即将分片任务下放到网卡硬件上来处理，
	提高网络吞吐量的一种方式)

26、什么是mss，受哪些因素影响？

27、什么是 RPS？什么是 RFS？作用是什么？
    (tips：RPS表示Recieve Packet Steering， RFS 表示 Recieve Flow Steering，
     RPS依据hash计算数据包软中断处理CPU，
     RFS在RPS基础上，根据流表来选择用户态收包的CPU
     两个策略都尝试最大化的利用Cache，减少因为上下文切换带来的Cache命中率的下降)

28、accept 调用返回时，三次握手是否结束？

29、accept 的内部实现？

30、有哪些内核参数会影响accept的行为？

31、没有accept，客户端和服务器怎么建立一个新的TCP 连接？

32、listen 函数参数的含义？

33、四元组包括哪些数据，五元组包括哪些数据？

34、TCP_NODELAY 标志有什么作用？
	(tips：TCP_NODELAY用来关闭nagle算法)

35、SO_REUSEADDR 标志有什么作用？

36、SO_REUSEPORT 标志有什么作用？

37、SO_REUSEADDR 和 SO_REUSEPORT有什么区别？使用中分别要注意什么？

38、什么是通配地址？

39、TCP都有哪些常用的拥塞控制算法？
    （tips：Tahoe，Reno，Cubic，BBR）
 
40、什么是慢启动？

41、什么是快重传？

42、什么是快恢复？

43、Tahoe 和 Reno 算法中，判断出现丢包的依据是什么？
	（tips：三次重复的ack）

44、举例说明哪种场景下会出现重复的ack？

45、TCP三次握手中，第一次SYN包的seqence是从0开始吗？为什么？选择算法是什么？

46、TCP的sequence id是每发一次数据加1还是其他方法递增？

47、内核是怎么解决 sequence id 回绕的？

48、什么是DPDK，解决了什么问题？

49、公网跨洋传输的带宽大概多少？

50、什么是SACK，有什么作用？

51、epoll有什么缺点？
    (tips：1、epoll的跨平台性不好
     2、epoll对多进程/多线程支持不够
     3、活动链接多时，需要频繁的申请内存保存活跃socket信息)

52、epoll的实现中使用了哪些数据结构？
    (tips：红黑树)

53、简单描述下BGP协议？基于IP实现还是TCP？

54、什么是BGP带宽？

55、AS是什么？

56、UPD socket什么时候可以使用read，什么时候可以使用write？

57、服务器端出现大量CLOSE_WAIT状态的socket的原因有哪些？
	(tips：close_wait是在应答了第一次的FIN后的状态，不管哪一端出现大量的CLOSE_WAIT，都说明程序中的逻辑
	没有尽快的close掉对端已经close的连接。如果出现在服务端，还有可能是accept的backlog过大，导致程序忙于
	accept新连接，而没有及时处理close连接)

58、LVS中负载均衡的实现都有哪些方式，有哪些优化方式？

59、SO_REUSEPORT的内核实现？

60、什么是TCP Incast？怎么解决？

61、什么是 路由收敛？

62、OSPF 和 BGP 的区别和联系是什么？

63、什么是 ECMP 策略？

64、使用DNS做全局负载均衡有什么缺点？

65、服务端出现大量TIME_WAIT状态的socket的原因有哪些？

66、大量TIME_WAIT socket对服务端有什么影响？

67、tcp_tw_reuse 变量有什么作用？
	(tips：首先这个参数只在客户端会起作用，因为他主要是快速回收socket，用于创建出链接，
	因为服务器端一般不会创建出链接，所以这个参数在服务端作用不大)

68、tcp_tw_recycle 变量有什么作用？
	(tips：socket处于 time-wait状态后，之前源端的数据包如果timestamp小于当前记录的数值，会被丢弃，
	这个参数在使用NAT的环境中会有问题，因为NAT转发过程中，尤其是 SNAT，出口数据包源ip都是相同，
	这就会有问题，一个连接关闭，影响了其他相同出口的连接)

69、ip_local_port_range 变量有什么作用？

70、上述几个变量怎么解决 No.66 中TIME_WAIT 过多的问题？

71、客户端直接向服务器发送 SYN/ACK 报文会受到什么回复？

72、客户端的SYN报文中可以带数据吗？服务端收到后会怎么处理？

73、socket() 函数有可能返回0吗？怎么实现？

74、标准TCP适合于哪种类型的网络传输？
	（tips：带宽时延低的网络和RTT很小的网络）

75、CUBIC具体做了什么改动？
	（tips：修改了拥塞避免的算法）

76、passive FTP 和 active FTP 的区别是什么？

77、FULLNAT 有什么作用？

78、怎样计算RTT？

79、什么是糊涂窗口综合症？
   （tips：接收端慢速读取数据，发送端发送大量小数据包，网络利用率不高）

80、零窗口通知的作用？

81、零窗口通知是接收端发送还是发送端？

82、什么时候停止零窗口？

83、ACK报文中可以携带数据吗？

84、延迟ACK有哪些好处？

85、中间路由器随机丢包的意义？
   （tips：生成重复的ack，帮助发送端确认网络状态）
   
86、TCP 中 MSS 表示什么？
	(tips：MSS表示TCP层可以给IP层传输的最大数据量)
	
87、MSS的取值和什么有关？

88、http标准中，怎么处理leading space？
	(tips：忽略，或者说是去掉leading space)
	
89、TCP_DEFER_ACCEPT 标志有什么作用？
    (tips：设置了这个option的listen socket 只有在连接上真正收到了数据时，listener才会被唤醒，
     这样会减少listener的wake up次数，提高效率)

90、sysctl -a | grep "tcp" | grep "re" 中各种重试次数与时间的设置都有哪些作用？

91、CLOSE_WAIT状态有timeout吗？
	(tips：没有，如果没有及时close，那么这个状态将一直保持)
	
92、LAST_ACK状态有timeout吗？
	(tips：被动关闭一方在发送FIN后，状态转为LAST_ACK，这时的timeout等同于普通发送数据等待ack的逻辑
	，如果超时没有收到ack，那么将重发FIN，直到收到对方响应，或超过最大重传次数，socket将会被关闭)
	
93、Nginx处理惊群问题的策略？
	(tips：刚开始通过一个mutex在应用层处理惊群，但是在大量随机访问情况下发现惊群问题不是很严重，就
	默认不开启这个锁，再到新版的内核通过REUSEPORT标志来彻底解决了惊群)
	
94、Nagle算法有什么作用？
	(tips：Nagle算法是在收到对端的ack之前，积攒本地socket的数据到至少一个mss大小，这样能提高整体的传输吞吐量，
	但不好的影响就是增加了访问延迟)
	
95、TCP_CORK 的作用是？
	(tips：作用和TCP_NODELAY相反，告诉内核，应用层后面还有数据要传输，暂时不要开启本次的发送动作，直到buffer中的数据超过某个limit，
	当TCP_NODELAY和TCP_CORK同时指定时，较早的内核中这两个参数的行为是互斥的，但是新版的内核更倾向于TCP_CORK)
	
96、perf -g -a -e skb:kfree_skb 然后 调用 perf script 可以看到具体看到丢包的代码路径

97、tcp_tw_timeout 这个参数用来调整处于time-wait状态的socket的等待时间，但是linux中这个变量并没有暴露出来。Ali内核中这个参数可以调整

98、bind 函数可以绑定非本地ip吗？
	(tips：可以，系统中有一个配置项来设置是否开始这个行为的支持
	net.ipv4.ip_nonlocal_bind = 1
	在运行负载均衡软件的系统中，为了保证系统的容灾特性，所以绑定一个未分配到网卡的地址，
	这样，当网卡出现异常时，系统让然可以正常工作)
	
99、数据包的发送过程，首先是TCP/UDP层的发送接口，然后调用IP层接口，然后调用Route层接口，
	然后调用调用设备层接口将数据包放入TC队列(流控队列)，然后根据队列算法，让核实的数据包出队，
	并调用网卡的发送函数，将数据包发送到网卡，如果网卡满足发送条件，则数据包会被真正的发送出去。
	
100、TCP的三个接受队列各有什么作用？
	(tips：sk_receieve_queue是真正的接收队列，
	prequeue则是在该socket没有正在被用户进程使用时，由软中断直接将数据包保存在prequeue中，并返回；
	sk_backlog是socket正处于用户进程上下文时，在软中断的处理过程中，内核会将数据包保存在sk_backlog中)
	
101、Raw Socket是否能收到TCP/UDP报文？
	(tips：Linux上的实现Raw Socket可以收到TCP/UDP报文)
	
102、net.ipv4.tcp_sack 系统变量有什么作用？
	(tips：TCP选择ACK，较早的实现中，TCP接收方只会应答给发送方已接收到的数据，
	如果有丢包发生，虽然收到了一部分数据，但可能仍然需要从丢包点重传全部数据，
	TCP 的 SACK 机制就是接收方会告诉发送方哪些数据收到了，哪些需要重传。
	有研究任务，在高速网络传输过程中，计算SACK的开销要高于重传数据。)

103、net.core.netdev_max_backlog 系统变量有什么作用？
	(tips：网卡收到包之后会放到各个CPU的backlog队列，如果队列满，那么会丢弃数据包)

104、net.ipv4.tcp_timestamps 系统变量有什么作用？
	(tips：TCP时间戳)

105、net.ipv4.tcp_window_scaling 系统变量有什么作用？
	(tips：之前TCP头部使用8-bits表示窗口大小，这在当下的高速网络传输中已不适用，
	现在在TCP options 字段中添加了扩展字段，数值表示位移的位数，
	在三次握手发送的SYN报文中会协商使用TCP window scaling，如果双方中任一方不支持，
	则不使用这一特性；这个取值最大为14，即窗口取值最大为 window * 2^14；
    这一特性只有在 带宽时延积大于 64K 的系统上有效，因为之前receive window最大值为64K；
    TCP 协议每一个报文中都有receive window的大小，如果握手时window scale协商成功，
    那么后续的协议交换中scale都会生效)
	
106、net.core.somaxconn 系统变量有什么作用？
	(tips：listen backlog队列最大数量,这个队列是指已经完成三次握手，
     但是还没有调用accept的请求)

107、net.ipv4.tcp_max_syn_backlog 系统变量有什么作用？
    (tips：这个变量控制着处于半连接状态的TCP连接数量，
     服务器收到客户端的SYN请求后，会将这个连接加入半连接队列，
     这个队列的长度就受题目中的这个系统变量控制)

108、ss 命令看到 处于 listen 状态的 socket 的 Recv-Q 和 Send-Q表示什么意思？
    (tips：listen状态的Recv-Q表示当前accept队列中等待accept的连接数量，
     最大数量受 题目106中所述变量控制，Send-Q表示当前socket的accept backlog取值，
     为 max(listen_backlog, /proc/net/core/somaxconn),
     当命令输出中这两个参数相等时，表示当前accept队列满，考虑调大somaxconn数值)

109、当半连接队列满时，新来的连接的处理方式为？
    (tips：丢弃新来的连接请求，客户端的connect会超时)

110、当accept队列满时，新完成握手的连接处理方式为？
    (tips：根据 /proc/sys/net/ipv4/tcp_abort_on_overflow 来决定如何返回，
     如果取值为 0，则忽略客户端发送的第三次ack，即认为连接还没有建立，
     过一段时间后再次发送SYN+ACK给客户端；如果 取值为1，表示直接返回给客户端RST)

111、在连接建立过程中，两个队列，半连接队列(syn queue) 和 全连接队列(accept queue)很重要

112、怎么通过命令行的方式关闭一条链接？
    (tips：因为一个进程里面有可能有多个链接，但我们有可能只想关闭某一个链接，
     所以不能简单的 kill -9，
     tcpkill 工具可以完成这一任务，但是前提是这条链接上面还有数据，通过伪造RST包的方式来关闭，
     如果是 非活跃链接，或者半关闭链接怎么处理？
     思路还是发送RST，但是因为数据链路上没有数据往来，构造TCP包里面的seqid未知，这里可以通过主动向
     服务端发送SYN包，服务端回复ACK里面带有seq数据，这样就可以拿到正确的seqid，然后手动构造RST包给服务端)

113、TCP头中的PSH 标志什么意思？
    (tips：当接收端收到带有PSH标志的包时，不会继续等待数据，而是直接唤醒上层的socket接收数据，
     所以，PSH一般用在 发送端 已经发送完数据，在最后一个包上带上PSH标志
     应用层无法控制TCP头中的PSH)

114、TCP头中的URG 标志什么意思？
    (tips：在FTP传输文件场景下，在传输大量数据的过程中，如果需要插入其他一些高优先级数据，例如，中断操作等，
     可以考虑使用URG
     不过 RFC 中不建议使用URG)

115、什么时候使用EPOLLOUT事件？
    (tips：想象一个场景，服务端向客户端返回1G的文件，那么直接往socket中写入1G是不行的，
     实际写入的数据大小依赖于buffer的大小，那么接下来的数据写入就依赖于EPOLLOUT事件来
     提醒上层应用可以继续发送数据)

116、ACK有重传吗？
    (tips：没有)

117、rp_filter 参数有什么作用？
    (tips：系统开启严格校验数据包源地址，这在多网卡机器上开启有可能导致
     数据包因为回包的网口和收包的网口不一致而丢弃，另一种情况就是 避免 DDoS攻击)

118、什么情况下会丢弃SYN包，怎么判断？
    (tips：1、accept连接队列满时 2、SYN序号回绕，
     当timestamp和tw_recycle两个选项同时开启的情况下，开启per-host的PAWS机制。
     从而能快速回收处于TIME-WAIT状态的TCP流。
     但这样真的就能完美的解决令无数人头疼的TIME-WAIT吗？答案是否定的！
     因为公网中存在太多的NAT设置，当使用per-host的PAWS机制时，
     是无法保证timestamp是线性递增这一假设的。因为使用同一个NAT地址的两个真实的机器，
     他们的timestamp是不能保证同步的)

119、TCP 中的 delay ack机制有什么作用？怎么工作？
    (tips：接收端不是每收到一个packet就回复一个ACK，而是启动一个200ms的定时器，
     在定时器超时后，检查是否需要发送ACK，如果需要，再发送；
     这其实是一种假定，即假定发送端在200ms内会发送新的数据过来；
     如果收到的包大于等于一个MSS，会立即回复ACK)

120、TCP中zero window表示什么？
    (tips：表示接收端缓存满，无法继续接收数据)

121、connect 出错的socket可以直接再次调用connect实现reconnect吗？
    (tips：不能，如果是timeout错误，会在重传尝试最大次数后调用tcp_write_err，
     进而调用tcp_done，设置socket的状态为TCP_CLOSE；
     如果是遇到RST回包，那就直接走CLOSE流程了，也就不能再用这个socket了)

122、SOCK_REUSEPORT可以用在Unix Domain socket之上吗？
    (tips：不能，man 手册上说 SOCK_REUSEPORT应用于AF_INET和AF_INET6)
	
123、IP层根据什么来重组分片了的IP报文？
	(tips：根据源目的IP/IP报文头中的ID字段/上层协议 这三个来标识属于同一个连接的分片后IP报文
	这里有一个问题，就是ID字段是一个16bits长度的整数，很容易发生回绕，
	Linux内核的解决办法是每一个目的IP使用一个不同的初始ID值来尽可能的降低ID冲突的可能；
	另，在某些NAT场景下，转换后的IP报文源IP都相同，如果恰好ID字段相同，那么有可能发生数据串线，
	有可能导致正确的数据包因为数据重复而被丢弃)    

// http
1、什么是CNAME？

2、http PUT和POST有什么区别？

3、http header中 content-type 域表示什么？

4、简单描述下https加密原理？

5、https加密header吗？

6、https默认监听哪个端口？

7、什么是Restful API？
   （tips：用URI定位资源，用HTTP动词来描述操作）
   
8、客户端怎么验证服务端证书？

9、什么是HTTP2？

10、HTTP2都有哪些相关优化？
	（多路复用，头部压缩，优先级）

11、HTTP2 中优先级的概念是强制的吗？

12、HTTP 中 PUT 和 POST 有什么区别？
	(tips：PUT操作是幂等的，PUT操作的更新是全量更新，POST允许更新数据部分内容，两者都有创建语义)
	
13、如果修改http头部的content-length字段会有什么效果？
	(tips：虽然没有验证过，但是直观感觉会导致服务端收包的大小发生变化，
	有可能导致包内容被截断，或者服务端等待超时)
	
14、一个TCP链接可以发送几个HTTP请求？
	(tips：在HTTP1.0 中，一个 TCP 链接发送一个 request，服务端回复一个response后，
	会断开链接，在 HTTP 1.1 中引入了 Connection: keep-alive，这样，一个TCP链接中就可以发送多个HTTP请求，
	但是，多个HTTP请求必须串行发送，即一个request等待对应response返回后才能继续发送下一个请求，
	在HTTP2.0中引入了 Multiplexing机制，这样多个request可以并行发送)

// 其他相关
1、iptables实现原理，使用了哪些算法？

2、普通的文件描述符 可以使用select 吗？有什么效果？
  （答案：File descriptors associated with regular files always select true for ready to read, ready to write, and error conditions.）
  
3、普通的文件描述符可以添加进 epoll 中吗？
    (tips：不能，普通文件不具有polling特性)

4、路由查找使用什么数据结构？

5、什么是NAPI？有什么作用？
	(tips：NAPI将之前通过Interrupt方式通知CPU的方式，改为poll模式，
	这在网络繁忙的模式下会提高收包效率，但是为了避免占用CPU过长时间，
	一次调用NAPI函数收取的包数量固定，一般配置为 64 个)

6、NAPI怎么解决可能的CPU占用过高问题？
	(tips：NAPI的收包数量受到限制，不可能无限制的接收，这样就控制了CPU利用率，
	控制来源于两个，一个是NAPI操作的weight值，另一个是 NAPI操作只能执行两个 jiffies)

7、什么是netfilter？

8、netfilter都有哪些hook点，对应于网络通信哪些过程？

9、什么是LVS？有什么作用？

10、netfilter都有哪些hook点？

11、tcpdump工作原理？

12、什么是bonding技术？常用的工作模式有哪些？

13、网络设备中 什么叫 “MAN Core”？

14、现在骨干网络带宽能达到什么量级？（最好能有各个公司的实现案例）简单描述下怎么实现？

15、DNS dig 命令输出中TTL的单位是秒？毫秒？

16、DNS dig 命令输出中TTL表示什么意思？
   （tips：如果是权威域名服务器，TTL表示域名的刷新时长，如果不是，表示距离下次刷新还有多长时间）
17、DNS view怎么理解？
   （tips：相同域名区分请求ip/区域返回不同的目的IP）
18、如何查看当前机器上的路由信息？
   （tips：route -n 命令）

19、SNAT 和 DNAT FULLNAT 分别有什么作用？
	(tips：SNAT 对IP包中的源地址根据规则进行转换，DNAT则对目的地址进行转换
	FULLNAT 则是 同时对源地址和目的地址进行转换，传统的服务部署中就是利用FULLNAT来完成用户请求处理)

20、上述几个NAT分别在netfilter哪个hook点工作？
	(tips：SNAT在postrouting hook点工作)
	
21、什么L4交换机？

22、TLS 协议能否保证数据一致性？
   （tips：使用MAC算法，一种类hash算法，来保证数据一致性）
   
23、什么是公网下沉？有什么作用？

24、怎样查看网卡带宽？
    (tips：sudo ethtool eth0 | grep Speed，这里查到的是网卡的静态带宽)

25、bond有哪几种模式，怎么查看？

26、网桥和交换机有什么区别？
	(tips：冲突域不一样，且网桥记录的是 MAC-总线记录，交换机记录的是 MAC-端口记录)

27、CSMA/CD 协议解决了什么问题？

28、什么是 DNS 劫持？有什么解决办法？
	(tips：解决办法有使用自己的DNS服务器，在程序中提前写好域名对应的ip)
	
29、什么是 GRO ？
	(tips：Generic Receiving Offload，即在网卡层将数据包尽可能的合并成一个个的大包传递给上层，
	之前还有LRO的实现，但是由于LRO的合并条件不够严谨，且只支持ipv4 tcp，后面改进为GRO)

30、什么是 GSO？
	(tips：上文中提到的TSO只是针对 TCP协议的优化，而GSO这是针对所有上层协议做的一种优化)
	
31、网络收敛比的概念？
	(tips：有两方面的理解，首先是交换机不支持线速转发，
	例如，12个网口，每个口输入1Gbps，但是出口只有8gbps，这时网络收敛比为 3:2。
	还有一种来自于架构层面，核心交换机万兆，后接12个千兆，则网络收敛比为 10:12，即 1:1.2)

32、网络数据发送前的操作都有哪些？
    (tips：1、首先根据ip 和 路由表决定数据从哪个网卡发出
     2、如果ARP缓存中没有ip对应的MAC，则发送ARP广播到路由器
     3、路由器会返回自己的MAC地址)

33、什么是C10K问题，解法是？
    (tips：字面上解释C10K就是可以支持并发10K个连接；早期的Apache采用线程模型，即一个连接一个线程处理，
     这就限制了并发连接数，当并发数量增加后，受限于内核，系统性能下降。
     解决方法：采用epoll接口实现事件驱动模型，请求的处理时间复杂度不再是O(n^2)，
     之前是O(n^2)是因为select/poll等接口的定义需要遍历两遍socket列表)

34、什么是C10M问题，解法是？
    (tips：C10M 相比于 C10K 不仅仅是并发连接数上的增加，
     还有延迟，数据传输速度上更高的要求；现在的内核数据面和控制面是统一的，
     这样的模式不利于高速数据传输，即常说的网络栈太长，也即DPDK等提出的原因
     C10M 涉及下面几个方面的扩展
     1、Packet层面，Packet bypass 内核，让应用更快速的接收到数据，需要自己实现Driver
     2、多核编程，这里的思路和之前多核编程提及的一样，即 数据分化，减少锁的使用，原子指令的支持
     3、内存方面，内存的预分配，专用分配，这一点slab已经实现，hugepage的使用)

35、交换机buffer作用是？
    (tips：buffer主要用来解决数据传输速度和lookup速度不匹配的问题，如果有 burst flow，
     后面来的数据需要先放进buffer，如果buffer满，则会drop packet，
     但队列也不是越长越好，因为队列的加长，意味着等待时间的增加，应用层的latency增加)

36、看交换机规格参数时，需要考虑端口带宽、包转发速率、背板带宽、buffer大小这些参数
    (tips：端口带宽一般就是常说的交换机带宽值，如家用的100M；
     背板带宽是指各个端口满速转发时，交换机芯片和各个端口间的数据传输速度，
     计算公式为 portNum*100M*2；
     包转发理论值为 portNum*100M/84，84=64+12+8，网络上最小的数据包
     实际值应该小于这个值；
     buffer的作用在于应对突发流量)
