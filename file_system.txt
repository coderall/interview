// 文件系统

1、inode号可以重复吗？

2、不同的文件描述符 怎样可以操作同一文件？

3、简单描述下 ext2 ext3 ext4 文件系统

4、简单描述下 VFS

5、简单描述下 文件系统挂载的实现

6、简单描述下 内核中的文件路径解析

7、bio层的功能简单描述下？

8、什么是超级块？

9、简单描述下 ext2 文件系统支持的最大单个文件大小的算法？（提示：考虑一级间接块，二级间接块，三级间接块）

10、简单描述下 什么是格式化？

11、ext2 使用的块分配算法是什么？ext3 ext4 又是怎么改进的？

12、ext3 和 ext4 通过什么方法提高数据的可靠性的？

13、readahead 的作用是什么？ 简单描述下文件系统预读操作？

14、 pipe 创建的管道在调用exec系列函数后是否仍然可用？

15、 O_CLOSEXEC 标志有什么用？

16、文件的 atime mtime ctime 分别表示什么？

17、怎样获取文件的创建时间？

18、简单描述下inotify机制

19、简单描述下 tail -f 命令的实现？

20、简单描述下电梯调度算法？

21、DIRECT I/O 和 SYNC I/O 的区别是什么？

22、free 命令的显示中 buffer 和 cache 分别代表什么？

23、文件的覆盖写和追加写有什么区别？

24、文件覆盖写时，如果没有进行4096对齐，会产生什么问题？
	（tips：写入时，还要进行剩余数据的读取，造成的一个现象就是写入时伴随着大量的读取操作）

25、文件系统视角下块设备最小操作单位是多少？（以ext文件系统为例）

26、磁盘视角下设备最小操作单位是多少？

27、多个I/O 操作能保证顺序吗？为什么？

28、在采用机械磁盘存储文件时，数据的具体存放位置有什么策略？
	（tips：优先同磁道，其次同柱面，然后就不同磁道了）
	
29、系统启动盘一般在内圈磁道还是外圈磁道，为什么？

30、描述下SSD盘的写入放大问题？

31、ext2文件系统对于目录的组织采用什么数据结构？ext3文件系统呢？为什么？

32、分别描述下RAID1 RAID4 RAID6？分别解决了什么问题？

33、什么是NAS？

34、什么是SAN？

35、什么是SPDK，解决了什么问题？

36、以append标志打开的文件读写是原子的吗？

37、EXT4 的journal 级别有哪些？

38、RAID技术有哪些缺点？

39、影响SSD性能的点都有哪些？

40、SSD有使用预读策略吗？

41、什么是RDMA？在使用中有哪些问题？

42、简单介绍下 RoCE 的实现？

43、SLC MLC TLC 分别表示什么类型的SSD？哪种性能最好？

44、什么是 Open-Channel SSD？

45、什么是文件系统的链式写，什么是扇出写（又叫星型写）？

46、一个进程正在读一个文件，另一个进程删除这个文件，会发生什么？

47、使用 vim或者cat查看文件后，再用 ls -lu 查看文件的atime 并没有改变，为什么？

48、文件系统挂载时的选项 noatime nodiratime 表示什么意思，为什么要这样做？

49、struct file 结构中的 address_space 表示什么？

50、什么是反向映射？解决什么问题？
	(tips：找到用户空间映射某一页面的所有进程，不是内核映射)

51、存meta信息的页在 address_space 中吗？

52、task_struct 结构中 prio,static_prio,normal_prio,rt_prio 字段分别表示什么意思？
	（tips：prio表示的是真实的优先级，static_prio和nice的操作关系密切，normal_prio表示的静态优先级的概念，fork时，子进程的static_prio=父进程的normal_prio
	  nice操作通过修改static_prio来影响优先级，进而计算进程对应的weight值，weight值呢又影响了CFS调度中vruntime增加的速度，联想对应PDF中不同nice值的进程
	  的vruntime增长速度）

53、nice的操作是怎样影响CFS调度器行为的？

54、O_NONBLOCK 标志对普通文件有效果吗？
	（tips：没效果）
	
55、ext2 文件系统的fast symbol link是怎么实现的？

56、readahead 对 dir的影响？

57、ext3 和 ext4 允许的子目录数分别在什么量级？
	(tips：查看 112 的解释)

58、ext4 multi-block allocation、extents和delayed allocation分表表示什么？有什么作用？

59、/proc/$PID/fd 目录下的各个文件表示什么？

60、SSD写入时，采用write back还是write through，为什么？怎么应对掉电？
	(tips：使用write back，SSD本身有大电容，可以保证掉电Cache中数据不丢失)

61、SSD中TRIM指令的作用是？
	(tips：回收不再使用的LBA地址)
	
62、普通文件系统的垃圾回收机制对SSD为什么有时不生效，反而会使得SSD速度变慢？
	(tips：LBA到真正的块地址映射关系和普通机械硬盘不同，将LBA调整为连续可能引起多余的数据擦除和拷贝)
	
63、SSD的预留空间对于文件系统可见吗？
	(tips：不可见，不同厂家的预留空间占总存储比例不同)
	
64、机械硬盘和SSD的Cache采用的是？
	(tips：SRAM)

65、都有哪些常见的zero copy技术？
	(tips：mmap，sendfile)
	
66、BIO 在执行前有两次合并过程，具体在哪一层？
	(tips：第一次是在 I/O 调度器层，第二次是在低层驱动层再做一次合并过程)
	
67、内核里面表示一次文件操作的 request 和 request_queue 结构分别表示什么？

68、I/O 调度算法都有哪些？

69、SSD常使用的调度算法是哪个？为什么？

70、CFQ算法怎么保证公平性的？

71、deadline调度算法分发请求时，优先处理读请求还是写请求？
	(tips：优先处理读请求，但是也会考虑deadline时间)
	
72、deadline调度算法使用了几个队列，作用分别是？
	(tips：四个队列，读写操作分别对应有调度队列和派发队列两个队列；
	I/O调度算法的执行过程中，潜在使用了调度队列来存放未经过处理的请求，
	而派发队列则为真正下一步要执行的请求)
	
73、什么是屏障I/O？
	(tips：这里可以联想CPU中的内存屏障指令的作用，即保证在屏障I/O前的请求的顺序)
	
74、屏障I/O的用户层接口是？
	(tips：这里还有待学习，把用户态的请求和内核的具体处理联系起来)
	
75、kintegrityd 内核线程的作用是？
	(tips：校验读请求返回的数据是否完整？)
	
76、内核中自带的数据完整性校验功能是怎么实现的？
	(tips：在每一个512扇区之后，利用之前不可见的8字节数据，
	存储CRC16计算出来的checksum，写入时计算，读取时校验数据，数据
	不一致时报错)
	
77、Multi-Disk模块表示？
	(tips：Linux软件RAID)
	
78、同一个设备，允许在不同的挂载点，挂载两次吗？
	(tips：允许，内核中有一个super block，但是对应不同的vfsmount)
	
79、libaio的实现原理？
	(tips：封装了内核原生支持的5个异步io系统调用，glibc的实现中是用线程池来模拟异步操作)
	
80、aio的实现原理？
	(tips：内部实现了一个队列，ring buffer，然后通过状态机来记录各个状态的io操作)
	
81、aio相比同步io优点？
	(tips：增加了queue size，增加了流水线处理，异步完成io)
	
82、libaio的缺点有哪些？
	(tips：1、需要O_DIRECT支持，在不支持O_DIRECT的文件系统或设备上，不能使用
			2、不支持sync语义
			3、不能支持socket文件)
			
83、dirty page怎么同步回磁盘？
	(tips：通过pdflush内核线程，刚开始pdflush是根据dirty page的数量多少来创建，
	后面修改为一个BDI(backing device info)磁盘设备一个pdflush)
	
84、dirty page什么时候刷回磁盘？
	(tips：有两个参数，一个是时间，一个是/proc/sys/vm/dirty_ratio参数)
	
85、怎么查看磁盘设备的 major minor 号？
	(tips：在 /dev 目录下 ls 一下，输出中就有major minor号)
	
86、O_SYNC fsync fdatasync有什么区别？
	(tips：三个都表示数据同步，第一个是在一次写入中完成，第二个和第一个操作过程类似，
	但是要多一次额外的函数调用，第三个较为轻量，只同步数据，不同步meta data)
	
87、Ext4 extents的作用是？
	(tips：将同一文件的数据临近存放，减少之前间接块索引导致的多次读取元数据，
	同时增加预读效果，加快truncate操作)
	
88、Ext4 multiblock allocation概念？
	(tips：之前的ext文件系统分配文件block时是一次分配一个block，性能较低)
	
89、SSD的page 、block分别指？
	(tips：page是读写的最小单位，一般为4KB，block由一组page构成，是erase操作的单位)
	
90、SSD中的page可以overwrite吗？
	(tips：不能，如果要修改原page中的数据，需要先找到一个处于clean状态的page，
	然后拷贝原数据，再写入新的page中，原page装填置为stale)
	
91、SSD 中 wear leveling 作用是？
	(tips：SSD中每一个cell都有固定的寿命，如果频繁操作某一些cell，会加快这些cell的失效，
	wear leveling 的作用就是尽可能的将读写操作分布于整个SSD中，而不是集中于某一些cell)
	
92、SSD中，怎么回收处于stale状态的page？
	(tips：TODO)
	
93、SSD中TRIM操作提出的背景？
	(tips：文件系统级数据删除了，但是SSD控制器并没有感知到，可能会影响到后续的文件读写)
	
94、e2fsck在1EB大小的文件系统上，需要119年才能完成

95、Ext系列文件系统中 block group 对于文件系统整体大小的限制？
	(tips：一个block group 128M，一个block group描述符64B，那么一个block group 可以放 128M/64个描述符，
	再乘以128M，整个文件系统的大小就为 128M/64 * 128M)
	
96、Ext4 文件系统中单文件16TB的限制怎么来的？
	(tips：之前stat的结果中，i_blocks表示的是以512字节为单位的扇区数量，现在改为4KBpage的数量，
	那么单个文件的大小就是 2^32 * 4KB)
	
97、Ext4 文件系统inode number多少位？
	(tips：32位)
	
98、Ext3 文件系统的目录组织结构是？
	(tips：有论文指出，ext3文件系统仍然沿用了ext2文件的目录组织结构，即链式结构，
	这个还需要考证，因为有其他论文在描述ext3对ext2的优化时提到ext3已经使用了hash的方法
	通过读代码，确认默认是通过链式结构组织，但是可以通过tunefs 工具修改为HTree结构)
	
99、Ext4 文件系统的 preallocation？
	(tips：对于数据库这种需要持续写入的数据的应用，如果文件系统层能提前分配好写入文件数据需要的block，
	那么会提高上层应用性能)
	
100、fallocate 函数作用？
	(tips：显示的调用preallocate过程，提前分配数据块)
	
101、Ext4 文件系统提供了纳秒级的时间戳

102、ext2/3 文件系统中磁盘上inode大小为 128字节，ext4 文件系统磁盘上inode大小为256字节

103、iCache 和 dCache的作用分别是什么？Cache的 key 是什么？

104、简单描述下FUSE？
	(tips：FUSE是一个用户态文件系统实现，由内核模块和libfuse组成，内核模块抽象了一个fuse文件系统和特殊的/dev/fuse文件，
	用户态的操作通过VFS导向fuse实现，再封装为对应的fuse请求数据写入/dev/fuse，用户态的libfuse轮询读取/dev/fuse文件，
	解析出对应的操作类型和数据，再调用用户自己实现的各个FUSE接口，如open，read，write等，用户态程序返回后，再将结果返回给内核模块，
	内核模块再将结果返回给最初的用户态)
	
105、快速符号链接原理是？
	(tips：其实还是符号链接，只不过链接的具体数据不存放在文件block中，而是inode中，
	这样减少了数据从磁盘的读取操作，更加快速)
	
106、Ext4中，一个文件的多个Extent使用什么数据结构保存？
	(tips：如果文件的extents少于3个，那么以数组的形式保存在inode中，如果再增加，则保存为BTree like的结构，
	这个BTree高度现在固定为2，但也有patch在考虑将这个限制放到3)
	
107、Btrfs 文件系统的一个亮点是提供了文件系统级的快照功能。

108、SSD盘对于原子写的支持？
	(tips：IO请求的路径较长，就算从驱动层发给了硬件，之前的硬件也没有提供原子写的支持
	这里是SSD硬件对于一定长度，一定数据地址对齐的请求，保证了原子的写入支持。)
	
109、Ext3 和 Ext4 文件中Journal的实现和文件系统的实现是两个模块，文件系统本身不知道Journal的存在，文件系统唯一知道的是Transaction的概念
	(tips：对应代码中就是Journal单独实现了JBD)
	
110、文件系统内各个Journal的提交顺序没有严格的保证，更新文件的meta，也是先commit log，然后更新磁盘上对应数据

111、如果文件系统Recover时Crash，那么数据会不一致吗？不会，因为Recover过程中，只是按照log重新操作磁盘上的文件数据，这个操作是幂等的。

112、Ext3 文件系统在代码中指定了一个目录最大的链接数是 32000，也就是说，去掉 . 和 .. 两个特殊目录，那么一个目录下就只能有 31998 个子目录
	这个是在代码中写死的，综合考虑了如果使用链式结构来存储子目录的查找性能。
	
113、Ext4 对于 Ext3 的改进之一是在 Journal层 添加了checksum 机制，利用CRC32 来校验数据的完整性。

114、Ext3 中文件名的最大长度是 254。

115、文件系统中的碎片有哪几种形式？
	(tips：single file fragmentation 、 relevant file fragmentation 、 fress space fragmentation)
	
116、fdatasync 是只同步数据，不同步meta吗？
	(tips：fdatasync也要同步meta，如果meta中只有mtime等不影响真正数据一致性的修改，则会忽略)
	
117、《Kernel support for stack file system》 1、数据的一致性，尤其是底层的文件系统数据有更新时，怎么通知上层的文件系统

118、AuFS多个文件系统文件名冲突时，只显示最上层的文件系统，下层的文件系统文件隐藏，可以通过将底层文件系统设置为RO，
	然后上层文件系统为RDWR，那么利用AuFS的Copy-On-Write特性，可以构建一个类似代码版本管理的系统，
	新的文件都将拷贝到上层文件系统中，而底层的文件系统并没有改变。
	
119、AuFS的删除策略，不同于其他操作，删除操作先删除底层文件系统中的文件，然后再删除上层，因为要避免上层的文件删除成功，
	底层的文件删除失败，导致底层的文件变成visible，引起歧义。
	
120、AuFS为使用带来方便，但是性能是有损失的，尤其是有多个branch时

121、写入文件分配block时，尽量让data block靠近indoe所在的block，让新的indoe和父indoe靠近

122、Ext3 有锁的改进，增加Journal间的并发度

123、Ext3早期版本解决Perallocation的方案是每一个inode维护了一个range，且各个inode之间的range隔离，这个range信息是在内存中保存，
	而不是磁盘上，这样解决了Ext2上的预分配导致的Crash恢复时数据的不一致问题
	
124、Ext4 Extent 树高最高为 5

125、fsync在保证当前文件本身的数据落盘的同时，对于包含这个文件的文件夹的更新则没有保证

126、fsync的man page中有说明，如果磁盘开启了write buffer，则当fsync函数返回时，无法保证数据落盘

127、126中的问题怎么解决？
	(tips：在mount时，添加 barrier 挂载参数，确保在每一次sync时，flush磁盘本身的write buffer
	这个也和具体的硬盘实现有关，需要了解硬件参数和配置)
	
128、blk-mq sheduler？
	(tips：内核为了提高SSD盘的吞吐量而设计的I/O调度器，其核心思想是，每个CPU核都有自己单独的request-queue，
	之前的merge逻辑不变，硬件层也同样有多个dispatch queue，然后尽可能的匹配SSD的处理能力，尤其是 NVMe SSD)
	
129、I/O polling？
	(tips：接上一条，如果外部存储设备的延迟够低，那么可以不用现在的基于中断的模式，而是polling，等待直到I/O完成，
	减少中断次数；如果采用这种技术，那么应用层应该尽可能的少用Non-blocking，因为这又引入了异步模式，需要额外的操作来
	确保命令已经执行完)
	
130、接上一条，有的SSD本身具有中断聚合功能，即尽可能少的中断CPU执行，批量提交I/O完成信息

131、ramfs 和 tempfs 有什么区别和联系？
	(tips：首先，这两个文件系统使用的都是内存，free命令中 cache 部分
	不同的是，tmpfs可以限制使用的总大小，且可以通过df 命令查看现在的使用量
	挂载命令 mount -t tmpfs -osize=100M tmpfs /your/mount/point)
	
132、fuse 中实现的non-privileged mount 概念？

133、当挂载多个fuse实例时，怎样区分发送的消息给不同的user process？
	(tips：各个挂载点的super block不一样，而super block中实现了不同的request queue)
	
134、用户态close一个文件，为什么需要调用 fuse flush和release接口？
	(tips： TODO)
	
135、vmtouch的实现原理？
	(tips：核心实现调用了mincore函数，在调用这个函数之前需要调用mmap将文件映射到内存中，
	然后判断文件的内容是否在内存中)
	
136、写入文件时，提示磁盘满，排查步骤
	(tips：1、df -Th 检查磁盘空间是否满，2、df -i 检查inode空间是否满
	3、查看目录是否有 dir_index特性，且当前目录下存在千万级文件，4、确认当前文件系统没有在恢复中)
	
137、Ext4 中 HTree 数据结构中 怎么处理 hash值相同的情况？
	(tips：并没有进行特殊的处理，还是按照二分查找法处理)
	
138、Ext4 中单目录下 子目录最多 65000个，对应 112 问题中的 Ext3的实现

139、indoe结构中的 i_nlink 字段的含义是？
	(tips：参照 112 和 138 问题的子目录数量)
	
140、Ext4 实现的 HTree 目录结构中，树高固定为 2，在 4.12 版内核之后，可以通过开启 largedir 特性来将树高 调到3
	(tips：如果树高为2，那么单个目录下的最大文件数在 千万 级别，还和 文件名大小有关)
	
141、通过文件系统读写数据时的读写惩罚是指？
	(tips：要随机修改1字节的数据，让然要读取page大小的数据到page cache中，然后进行修改，
	再将4096大小的数据写回，这里面就有4095大小的冗余数据流量，
	企业级存储产品针对这个特性有做优化，实现类似于针对设备中的扇区进行hash，然后识别扇区的数据修改，
	将数据修改的粒度缩小到扇区级别，减少冗余数据)
	
142、企业级存储产品的功能优化有？
	(tips：SafeCache，大容量的SSD缓存，异步将数据更新刷回后端存储，
	HotZone，主动识别热点数据区域，将数据同步到前端SSD缓存中，
	SED，Service Enable Device功能实现的存储虚拟化产品的逃生模式和数据迁移支持，
	逃生模式是将之前通过虚拟化设备的IO数据流量透传给后端的存储设备，而不至于业务中断，
	这就需要虚拟化设备不能在内部修改或者重映射后端存储设备的信息)
	
143、Stretched Cluster功能和云上服务提供的 Data Replicate Service 很像，都是提供了异地的数据容灾

144、写内核线程正在刷回磁盘的页面会有什么结果？
	(tips：内核线程会对正在写回的页面加写保护，当有后续的写入时，会触发写保护，调用do_page_fault，
	后续会等到内核线程将数据刷回了才能再次写入对应页面)
	
145、多个进程打开相同文件，page cache 中会缓存多份数据吗？

146、EC编码在什么情况下会出现性能问题？
	(tips：首先，EC码通过矩阵运算得到，这一步会消耗CPU，
	其次，在更新EC编码的文件时，需要先读出part data，然后计算校验和，
    再写入，这一步也会有开销，已3+1 模式为例，会有4倍的数据流量)
	
147、EC编码和RAID技术的比较？
	(tips：RAID技术不适用于大容量存储中，RAID5 5个9 RAID6 8个9的数据安全性)
	
148、磁盘静默错误怎么解决？
	(tips：使用 DIX/DIF在每一个扇区后追加校验字段来解决，
	也可以由业务开发校验程序)

149、vm.dirty_ratio 作用是什么？
    (tips：系统中脏页面所占内存的最大比例，如果高于这个比例，新的I/O请求将阻塞，
     直到之前的脏页面写回)

150、vm.dirty_background_ratio 作用是什么？
    (tips：系统中脏页面能占系统内存的最大比例，与上面参数不同的是，
     这里的限制更像是软限制，当超过这个值时，后台的flush线程启动)
	 
151、文件系统Snapshot原理是？
	(tips：简单实现就是拷贝磁盘上的所有数据，这在RAID1中已有实现；
	但是考虑到需要拷贝的数据量和拷贝的同时需要停止其他I/O，所以说需要其他实现；
	另一种实现思路是只拷贝元数据，数据量很少，可以很快完成，后面数据的持续修改，
	有CoFW 和 RoFW两种实现方式，FW代表 First Write
	CoFW：当有数据更新需求时，将原数据拷贝一份出来，这时snapshot中的元数据指向的是老数据，
	然后将原地更新老数据，这里只更新一次，如果下次还有同样位置的数据更新，那么就不需要再拷贝数据
	RoFW：当有数据更新需求时，将数据更新地址重定向到另外的空闲块，这样减少了数据拷贝，
	但是后面的数据读取操作需要计算重定向信息
	CoFW需要拷贝数据，有一定的I/O开销，但是对源文件系统没有侵入，
	后续的读取不需要计算重定向信息，且之前的大块预读仍然可以继续；
	但RoFW因为后续的修改导致数据可能较分散，读取时需要计算重定向信息)
	

152、Overwrite 系统 和 Append 系统？
    (tips：Overwrite系统指数据在原位置更新，即新数据覆盖老数据，
     Append系统则是新数据在新位置，老的数据依赖于GC功能删除)

153、直写EC有什么问题？
    (tips：如果是大块写，那么在数据写入时计算EC码，并且刷盘是没问题的，
     但是如果是小块写，考虑到数据安全性，不够一个大块的数据需要填充，然后仍然计算校验和、刷盘，
     后面有数据到来时，考虑到 146 中提到的流量放大问题，写入效率低。
     FusionStorage为了解决这个问题，做了一层缓存，对外是直写EC，但是由缓存将小块写转为大块写)
