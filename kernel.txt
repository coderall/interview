--- 内核相关面试题目汇总 ---

// CPU 调度&进程管理

1、简单介绍下 O(1)调度算法

2、简单介绍下CFS算法，和O(1)算法的不同之处在哪

3、什么是IDT，有什么用

4、中断处理 和 内核态调用 哪个优先级高，为什么？

5、IPI是什么，有什么用？

6、pthread_mutex 默认情况下 对同一个锁 重复加锁两次 会有什么效果，为什么？

7、pthread_mutex 怎么实现？ 使用了哪个系统调用？

8、可以在线程中调用fork吗？为什么？

9、内核是怎么处理僵尸进程的？

10、ps的命令中，怎么知道哪个是内核线程(一般情况下)，内核线程又是怎么实现的？
	(tips：使用 ps -afx 可以查看所有的内核线程)

11、在内核中，怎么获取当前进程的 task_struct 结构？

12、为什么在spinlock的临界区中不能睡眠？

13、为什么在中断处理程序中不能睡眠？

14、内核中使用较多的锁都有哪些？作用都有哪些？

15、简单解释下RCU？

16、解释下uptime命令的输出？具体的计算依据是什么？（CPU run queue中 runnable进程和处于D状态的进程数量）
	(tips：计算方式类似于统计时间段内平均值)

17、nice命令的作用有哪些？

18、进程的静态优先级和动态优先级的概念？

19、top 命令输出中 hi 列 si 列 分别代表什么？

20、mpstat 或者 sar 命令中 steal% 列代表什么意思？

21、解释下bogomips？

22、内核中表示时钟中断频率的常量值是哪个？在命令行中怎么查看？

23、后台服务器和桌面系统的时钟中断频率值有什么差别？为什么要这样设置？

24、chrt 作用有哪些？

25、简单解释下 CFS 调度算法中的vruntime概念？

26、fork 调用后 父进程先执行还是子进程先执行？

27、解释下 sched_yield 函数？

28、怎样查看系统是否支持cgroup？

29、怎样避免程序被调试执行（安全相关）？
    tips：PTRACE_TRACEME & SIGTRAP handler & /proc/self/status
 
30、简单解释下 vsyscall & vdso ？

31、/proc/kcore文件有什么用？

32、/proc/kallsyms文件有什么用？

33、linux的线程实现方式？

34、简单描述下线程组中接收到信号的处理？

35、task_struct结构中pid，tgid的作用？

36、getpid(),gettid()实现？
   (tips:getpid其实取的值是tgid，gettid取的值是pid，有点绕。其实还是和LWP的实现方式相关)
   
37、pthread_self() 又是怎么实现的呢？和上面两个函数的区别和联系分别是什么？

38、top命令显示中S列代表什么？"I"表示什么状态？

39、什么是内核抢占？在多核系统中怎么定义？

40、preempt_enable是一个抢占点吗？为什么？
	（tips：在preemt_enable函数中，会尝试抢占执行，具体参考源码实现）

41、sysenter和sysexit指令实现了什么功能？

42、SCHED_FIFO SCHED_RR SCHED_NORMAL 三种调度策略有什么区别？

43、什么是DMA？

44、什么是RDMA？

45、什么是IPI？有什么作用？

46、CFS中通过什么方法来避免fork出的新进程总是优先于其他进程执行？

47、CFS算法中怎样保证长时间睡眠的进程被唤醒时（vruntime很小），不至于长时间占用CPU？

48、CFS算法中，进程从一个CPU上迁移到另一个CPU，对应的vruntime会不会变？为什么要这样做？

49、系统中最大进程数由什么控制？
    （tips：之前的设计中，进程数量还受到GDT表项的限制，但现在没有这个问题了）

50、pread和pwrite在哪种场合下使用较多？
    （tips：因为pread和pwrite的操作不修改对应fd的offset，所以在多线程读写方面有优势）

51、access_ok 宏有什么作用？

52、链接静态库时，单个.o文件中未引用的部分的优化方式是什么？

53、什么是LLC cache？

54、Intel 的 Skylake 和 Broadwell架构有什么区别，带来了什么影响？

55、spinlock怎么实现？（考虑多核情况）
	（tips：当前内核中采用ticket-based算法来实现）
	
56、Linux现在的实现中中断允许嵌套吗？为什么？

57、当内核现在正处于中断处理上半部时，后面来的中断怎么处理？丢掉还是？
	（tips：pengding）

58、怎样禁止 ping 请求？
	（tips： echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all）
	
59、系统重启后上述的禁止 ping 会失效，怎么解决？
	(tips： 在 /etc/sysctl.conf文件中添加 net.ipv4.conf.icmp_echo_ignore_all=1)
	
60、nice值在 O(1) 和 CFS 算法中有什么不同的含义？

61、oops 和 panic 一样吗？
	(tips：不一样，在硬中断或软中断中，如果oops，那么肯定panic，即内核崩溃，如果是在进程上下文中，那么发送SIGSEGV信号，如果配置了oops_on_panic选项为1，那么在oops中内核也会崩溃。总结就是 oops 不一定会引起 内核 panic)
	
62、write被中断打断后，会返回什么？ERRNO又会是什么？
	(tips：尤其是在处理网络请求时要注意)
	
63、上下文切换有哪几种？都有哪些寄存器参与了上下文切换？
	(tips:具体有进程上下文切换，中断上下文切换，线程的上下文切换
	进程的上下文切换中，TLB尤其重要；中断上下文中涉及到了很多和
	中断标志等有关的信息的保存；线程上下文切换则相对比较轻量)
	
64、怎样查看进程具体的上下文切换数据？
	(tips：pidstat -w 参数可以查看上下文切换是自愿还是被动
	更加具体的中断信息，需要查看/proc/interrupts文件中数据)
	
65、top 或 pidstat中展示的CPU使用率信息怎么计算？
	(tips：通过/proc/cpu 信息计算或者 /proc/{pid}/stat
	计算方式其实是1-TimeIdle/TimeTotal)
	
66、 内核线程和用户线程有什么区别？
	(tips：1 创建方式不同，用户态线程通过clone或fork创建
	2 内核线程没有自己的栈空间，使用内核栈，且使用上一个进程的内存空间
	3 内核线程一直运行于内核态)
	
67、怎样做到进程不重启 而升级库文件版本？
	(tips：使用dlopen得到所有使用的接口函数指针，然后替换文件（这一步是安全的，因为对应库文件已经映射到内存中，
	磁盘文件的修改不会影响程序运行），然后向进程发送信号等方式来通知，
	进程等到所有引用这个接口的处理完成后，再重新dlopen保存新的函数指针)

// 内存管理

1、malloc的实现

2、简单介绍下 tcmalloc 或 jemalloc 或 ptmalloc

3、简单介绍下 buddy system

4、简单介绍下 slab

5、内核初始化时使用的内存分配算法是什么？

6、内核的一级页表和二级页表分别存放在哪里？

7、slab是怎样避免内存碎片的？

8、slab分配的是物理内存还是虚拟内存？

9、buddy system 分配的是物理内存还是虚拟内存？

10、简单解释下slab着色？

11、匿名页面和文件缓冲页面有什么区别？

12、解释下什么是 NUMA？

13、使用哪个命令来查看NUMA信息？

14、/proc/interrupts 文件内容解释？

15、应用程序中怎样将虚拟地址转换为物理地址？

16、简单描述下 /proc/{pid}/pagemap？ -> Q:15

17、为什么malloc的实现中，大于128K的内存使用mmap？

18、什么是内存巨页？相比于传统的页大小有什么优势？

19、简单描述下hugetblfs？

20、怎样查看系统是否开启了巨页？

21、什么是PAE，有什么作用？怎么实现？
	(tips：PAE表示物理地址扩展，解决了32位虚拟地址在大于4G环境下，仍然只能映射4G物理地址的问题
	具体细节是，32位地址的高两位用来选择页目录表表项，接下来的9位表示页目录项，
	再接下来的9位表示页表项，剩下的12位仍然表示页内偏移；页表项扩展为64位，从12到35位表示物理地址前缀
	这样 24 + 12 = 36，可以表示64GB物理地址空间)

22、CPU的 CR3 寄存器存放的是什么？

23、Linux的页表访问分为几个层级？具体实现方式？

24、什么是swap，有什么作用？

25、什么是内存overcommit？

26、系统可配置的处理overcommit策略都有哪些？

27、怎样判断进程有overcommit行为？

28、系统内存空间紧张后的回收策略都有哪些？

29、kswapd 线程有什么作用？

30、什么是同步回收，什么是异步回收？

31、什么情况下会启动kswapd线程？

32、kswapd是否是多线程的？
	(tips：大多数系统上为单线程，但已经有人提出了多线程版本的patch)
	
33、kswapd 消耗CPU过高的问题怎么解决？

34、vm.swapiness 系统参数的作用是？

35、swapoff 和 swapon 命名有什么作用？

36、/proc/sys/vm/drop_caches 传入 1 2 3 分别代表什么？
	(tips：1 表示只回收pageCache，2表示回收dentries和inode，3表示上述两个都回收)

37、缓存一致性协议有哪几种实现方式？
	(tips：基于目录的MESI实现和基于总线通讯的实现)
	
38、Power系列CPU 和 x86CPU 的比较？

39、split lock是什么？
	(tips：MESI协议只能保证Cache line的数据一致性，而如果数据跨越了Cache line，则仍然需要锁总线，这就是split lock，
	不利于性能提升)
	
40、什么是 Power Virsus？
	(tips：指一类高功耗程序，CPU热量增加，触发THP，CPU会强制降频，这在多租户的情况下，会影响其他VM)
	
41、Intel RDT 技术，实现了高速缓存、内存带宽级别的资源隔离，具体包括，CMT(高速缓存监控)，CAT（高速缓存分配），
	MBM（内存带宽监控），代码和数据优先级（CDP）
	
42、touch 命令的作用？
	(tips：touch命令更新文件的access time 和 modify time，这在make编译程序时常用，在不修改文件内容的情况下，
	触发重编译)
	
43、编译器如何处理inline函数中的static变量？
	(tips：这里的处理和inline函数本身没什么关系；带有extern属性的函数，编译器保证多次调用函数时，static变量指向的是同一个对象，
	如果是internal类型的inline函数，就更能保证这一点。static函数中的static变量在不同的编译单元中都有一份定义)
	
44、flock对于dup操作的特点是？
	(tips：dup操作后，因为使用的是同一个打开文件，所以仍然共有flock属性)，如果一个文件被打开多次，
	那么就是不同的文件描述符，所以锁是独立的。一个文件flock后，后续的其他打开文件不进行flock操作也可以进行正常的读写，
	所以说flock是一种逻辑锁。
	
45、dmesg命令的作用是？
	(tips：dmesg查看内核中的环形缓冲区信息，可以获得如CPU、硬盘、网卡等设备的信息)
	
46、什么是 cc-NUMA ？
	(tips：即保证数据一致性的NUMA架构，主要的是Cache的数据一致性)
	
47、NMI中断表示什么意思？
	(tips：NMI表示Non-Mask Interrupt，即不可屏蔽中断，不可以通过CLI设置标志寄存器的IF位而忽略)
	
48、CPU本身是否支持中断优先级？
	(tips：CPU本身是有支持中断优先级的，但是位于同一个优先级内的多个中断的处理可能与CPU型号有关)
	
49、为什么两次mmap同样的地址，没有报错？
	(tips：因为第二次mmap时，会先unmap之前的映射，然后再次尝试mmap)
	
50、DR0 ~ DR7寄存器的作用？
	(tips：硬件断点的实现)
	
51、IVT 和 IDT有什么区别？
	(tips：IVT是中断向量表用来在实模式下处理中断，IDT是中断描述符表，用来在保护模式下处理中断)
	
52、malloc刚申请的内存内容显示“烫”表示什么？
	(tips：调试模式下保护程序访问未初始化的内容内容，其实质是 int 3指令，用来触发调试)
	
53、写时复制(COW)是通过什么实现的？
	(tips：通过缺页中断来实现)
	
54、缺页中断会发生在内核态吗？为什么？

55、内核中struct page 并没有指向具体内存的指针，那么page对应的存储空间怎么表示？

56、struct page结构中的 _count 和 _mapcount 有什么区别？
	(tips：_count表示内核中引用当前页面的数量，_mapcount表示有多少个进程映射了当前页面)
	
57、反向映射的技术实现是？
	(tips：早期通过遍历进程来实现，效率较低，之后的实现方法是父进程中有一个链表用来保存共享页面，
	如果需要从page找到对应的进程，则遍历这个链表，更新的实现是通过一个中间结构来衔接父进程和子进程，
	映射的共享页面加入到红黑树中加快查找过程。)
	
58、怎么判断一个page是匿名映射还是文件映射？
	(tips：page结构中的mapping字段的低两位有对应的掩码来标识当前页面的匿名页面还是文件映射页面)
	
59、反向映射的典型应用场景有哪些？
	(tips：kswapd内核线程回收页面时，页面迁移时，需要重新映射对应的PTE表项)
	
60、什么是KSM页面？
	(tips：KSM页面是指Kernel Shareable Merge页面，由madvise函数创建，且使用MERGEABLE标志)
	
61、KSM页面的使用场景是？
	(tips：有研究指出，在多虚拟机环境下，虚拟机主要使用的是匿名页面，且各个页面映射的物理页面的内容一样，
	这就可以合并页面，释放多余的物理页面)
	
62、KSM具体实现细节是？
	(tips：首先通过madvise创建的页面加入到对应的KSM 链表，然后扫描stable树，找到候选的页面，
	通过校验和机制来确定物理页面是一样的，然后修改PTE指向，这里需要注意，当修改多个PTE指向相同物理页面后，
	该页面需要执行COW，即当有人修改时，还是需要分离页面)
	
63、如果用户空间使用 PROT_READ 来mmap映射一个文件到用户空间，然后使用memcpy来写这段内存空间，会发生什么？
	(tips：内核会检测到权限不匹配，产生对应的段错误)
	
64、假设在内核空间获取了某个文件对应的page cache页面的struct page数据结构，对应的VMA是只读的，
	那么内核空间是否可以修改该page的内容呢？
	(tips：可以，内核空间和用户空间使用的PTE不一样，内核利用KMAP机制映射页面是可写的)
	
65、如何由mm数据结构和虚拟地址vaddr 找到对应的VMA？
	(tips：vma记录在以起始地址为key的一个红黑树中，所以只需要查找这个红黑树就可以找到)
	
66、如何由page和VMA找到虚拟地址vaddr？
	(tips：page->index记录了vma中的偏移量，加上vma->start_addr)
	
67、如何由page找到所有映射的VMA？
	(tips：反向映射的实现)
	
68、如何由VMA和vaddr找出相应的page数据结构
	(tips：根据vaddr 在页表中查找到pfn，然后在全局page数组中根据下标访问)
	
69、什么是OOM？
	(tips：内存紧张时，向进程发送SIGKILL信号)
	
70、flock的实现？
	(tips：flock是基于struct file结构中的flags实现的，本身并不基于inode中的锁，但是，
	考虑到同一个文件可能在不同进程中open，包括同一进程open多次，具体实现中是在inode中以链表的形式来
	保存锁信息)
	
71、flock锁定的文件，是否可以unlink？
	(tips：可以，不影响)
	
72、内核在面对多核系统时，都可能有哪些瓶颈点？
	(tips：CPU级别的负载均衡，per-cpu runqueue，合理使用IPI机制，内存分配中的锁的合理使用，NUMA环境下的内存分配，
	I/O队列的per-cpu设计，网络收发队列的per-cpu设计，各个统计计数功能的per-cpu设计)
	
73、在64位系统中为什么不存在高端内存的概念？
	(tips：因为在64位系统中，内核可以使用的内存有128T，而机器上真正安装的内存大小小于这个数值，
	所以用不到高端内存)
	
74、x86 和 x86_64 系统中 zone 的表示有什么不同？
	(tips：x86_64系统中不存在 ZONE_HIGHMEM，如果外设可以访问高于16M且小于4G空间时，增加ZONE_DMA32)
	
75、用户空间进程是否有高端内存概念？
	(tips：没有)
	
76、为什么不把所有地址空间分配给内核使用？
	(tips：因为没有这个必要，不是所有的程序都需要运行在内核态，即用户态访问用户态数据，内核态访问内核数据)
	
77、rename 函数时原子的吗？
	(tips：查看man page 这个函数是原子的执行的)
	
78、内核栈空间一般多大？
	(tips：8KB，两个页面大小)
	
79、getpid 和 gettid 分别返回什么？
	(tips：POSIX规定，同一个线程组内的线程共享一个PID，但是Linux内核为每一个线程都分配了不同的PID，为了满足协议要求，
	就添加了thread group id的概念，这样，getpid 返回的其实就是 thread group id，而gettid返回的是线程真正的PID)
	
80、面试题，for循环，然后调用 fork，回答打印的字符数量？
	(tips：如果打印在前，fork在后，那么数量就是以循环次数为高的树的叶子节点总数
	如果fork在前，print在后，那么打印的数量就是以循环次数+1为高的树的叶子结点总数-1(减去根节点))
	
81、CFS调度器中，怎样计算vruntime？
	(tips：使用 实际执行时间 * nice_0_weight / weight，进程的nice值越高，weight越低，vruntime越大，
	被调度的可能越小)
	

// 文件系统

1、inode号可以重复吗？

2、不同的文件描述符 怎样可以操作同一文件？

3、简单描述下 ext2 ext3 ext4 文件系统

4、简单描述下 VFS

5、简单描述下 文件系统挂载的实现

6、简单描述下 内核中的文件路径解析

7、bio层的功能简单描述下？

8、什么是超级块？

9、简单描述下 ext2 文件系统支持的最大单个文件大小的算法？（提示：考虑一级间接块，二级间接块，三级间接块）

10、简单描述下 什么是格式化？

11、ext2 使用的块分配算法是什么？ext3 ext4 又是怎么改进的？

12、ext3 和 ext4 通过什么方法提高数据的可靠性的？

13、readahead 的作用是什么？ 简单描述下文件系统预读操作？

14、 pipe 创建的管道在调用exec系列函数后是否仍然可用？

15、 O_CLOSEXEC 标志有什么用？

16、文件的 atime mtime ctime 分别表示什么？

17、怎样获取文件的创建时间？

18、简单描述下inotify机制

19、简单描述下 tail -f 命令的实现？

20、简单描述下电梯调度算法？

21、DIRECT I/O 和 SYNC I/O 的区别是什么？

22、free 命令的显示中 buffer 和 cache 分别代表什么？

23、文件的覆盖写和追加写有什么区别？

24、文件覆盖写时，如果没有进行4096对齐，会产生什么问题？
	（tips：写入时，还要进行剩余数据的读取，造成的一个现象就是写入时伴随着大量的读取操作）

25、文件系统视角下块设备最小操作单位是多少？（以ext文件系统为例）

26、磁盘视角下设备最小操作单位是多少？

27、多个I/O 操作能保证顺序吗？为什么？

28、在采用机械磁盘存储文件时，数据的具体存放位置有什么策略？
	（tips：优先同磁道，其次同柱面，然后就不同磁道了）
	
29、系统启动盘一般在内圈磁道还是外圈磁道，为什么？

30、描述下SSD盘的写入放大问题？

31、ext2文件系统对于目录的组织采用什么数据结构？ext3文件系统呢？为什么？

32、分别描述下RAID1 RAID4 RAID6？分别解决了什么问题？

33、什么是NAS？

34、什么是SAN？

35、什么是SPDK，解决了什么问题？

36、以append标志打开的文件读写是原子的吗？

37、EXT4 的journal 级别有哪些？

38、RAID技术有哪些缺点？

39、影响SSD性能的点都有哪些？

40、SSD有使用预读策略吗？

41、什么是RDMA？在使用中有哪些问题？

42、简单介绍下 RoCE 的实现？

43、SLC MLC TLC 分别表示什么类型的SSD？哪种性能最好？

44、什么是 Open-Channel SSD？

45、什么是文件系统的链式写，什么是扇出写（又叫星型写）？

46、一个进程正在读一个文件，另一个进程删除这个文件，会发生什么？

47、使用 vim或者cat查看文件后，再用 ls -lu 查看文件的atime 并没有改变，为什么？

48、文件系统挂载时的选项 noatime nodiratime 表示什么意思，为什么要这样做？

49、struct file 结构中的 address_space 表示什么？

50、什么是反向映射？解决什么问题？
	(tips：找到用户空间映射某一页面的所有进程，不是内核映射)

51、存meta信息的页在 address_space 中吗？

52、task_struct 结构中 prio,static_prio,normal_prio,rt_prio 字段分别表示什么意思？
	（tips：prio表示的是真实的优先级，static_prio和nice的操作关系密切，normal_prio表示的静态优先级的概念，fork时，子进程的static_prio=父进程的normal_prio
	  nice操作通过修改static_prio来影响优先级，进而计算进程对应的weight值，weight值呢又影响了CFS调度中vruntime增加的速度，联想对应PDF中不同nice值的进程
	  的vruntime增长速度图）

53、nice的操作是怎样影响CFS调度器行为的？

54、O_NONBLOCK 标志对普通文件有效果吗？
	（tips：没效果）
	
55、ext2 文件系统的fast symbol link是怎么实现的？

56、readahead 对 dir的影响？

57、ext3 和 ext4 允许的子目录数分别在什么量级？
	(tips：ext3在10k级别，ext4在100k级别)

58、ext4 multi-block allocation、extents和delayed allocation分表表示什么？有什么作用？

59、/proc/$PID/fd 目录下的各个文件表示什么？

60、SSD写入时，采用write back还是write through，为什么？怎么应对掉电？
	(tips：使用write back，SSD本身有大电容，可以保证掉电Cache中数据不丢失)

61、SSD中TRIM指令的作用是？
	(tips：回收不再使用的LBA地址)
	
62、普通文件系统的垃圾回收机制对SSD为什么有时不生效，反而会使得SSD速度变慢？
	(tips：LBA到真正的块地址映射关系和普通机械硬盘不同，将LBA调整为连续可能引起多余的数据擦除和拷贝)
	
63、SSD的预留空间对于文件系统可见吗？
	(tips：不可见，不同厂家的预留空间占总存储比例不同)
	
64、机械硬盘和SSD的Cache采用的是？
	(tips：SRAM)

65、都有哪些常见的zero copy技术？
	(tips：mmap，sendfile)
	
66、BIO 在执行前有两次合并过程，具体在哪一层？
	(tips：第一次是在 I/O 调度器层，第二次是在低层驱动层再做一次合并过程)
	
67、内核里面表示一次文件操作的 request 和 request_queue 结构分别表示什么？

68、I/O 调度算法都有哪些？

69、SSD常使用的调度算法是哪个？为什么？

70、CFQ算法怎么保证公平性的？

71、deadline调度算法分发请求时，优先处理读请求还是写请求？
	(tips：优先处理读请求，但是也会考虑deadline时间)
	
72、deadline调度算法使用了几个队列，作用分别是？
	(tips：四个队列，读写操作分别对应有调度队列和派发队列两个队列；
	I/O调度算法的执行过程中，潜在使用了调度队列来存放未经过处理的请求，
	而派发队列则为真正下一步要执行的请求)
	
73、什么是屏障I/O？
	(tips：这里可以联想CPU中的内存屏障指令的作用，即保证在屏障I/O前的请求的顺序)
	
74、屏障I/O的用户层接口是？
	(tips：这里还有待学习，把用户态的请求和内核的具体处理联系起来)
	
75、kintegrityd 内核线程的作用是？
	(tips：校验读请求返回的数据是否完整？)
	
76、内核中自带的数据完整性校验功能是怎么实现的？
	(tips：在每一个512扇区之后，利用之前不可见的8字节数据，
	存储CRC16计算出来的checksum，写入时计算，读取时校验数据，数据
	不一致时报错)
	
77、Multi-Disk模块表示？
	(tips：Linux软件RAID)
	
78、同一个设备，允许在不同的挂载点，挂载两次吗？
	(tips：允许，内核中有一个super block，但是对应不同的vfsmount)
	
79、libaio的实现原理？
	(tips：封装了内核原生支持的5个异步io系统调用，glibc的实现中是用线程池来模拟异步操作)
	
80、aio的实现原理？
	(tips：内部实现了一个队列，ring buffer，然后通过状态机来记录各个状态的io操作)
	
81、aio相比同步io优点？
	(tips：增加了queue size，增加了流水线处理，异步完成io)
	
82、libaio的缺点有哪些？
	(tips：1、需要O_DIRECT支持，在不支持O_DIRECT的文件系统或设备上，不能使用
			2、不支持sync语义
			3、不能支持socket文件)
			
83、dirty page怎么同步回磁盘？
	(tips：通过pdflush内核线程，刚开始pdflush是根据dirty page的数量多少来创建，
	后面修改为一个BDI(backing device info)磁盘设备一个pdflush)
	
84、dirty page什么时候刷回磁盘？
	(tips：有两个参数，一个是时间，一个是/proc/sys/vm/dirty_ratio参数)
	
85、怎么查看磁盘设备的 major minor 号？
	(tips：在 /dev 目录下 ls 一下，输出中就有major minor号)
	
86、O_SYNC fsync fdatasync有什么区别？
	(tips：三个都表示数据同步，第一个是在一次写入中完成，第二个和第一个操作过程类似，
	但是要多一次额外的函数调用，第三个较为轻量，只同步数据，不同步meta data)
	
87、Ext4 extents的作用是？
	(tips：将同一文件的数据临近存放，减少之前间接块索引导致的多次读取元数据，
	同时增加预读效果，加快truncate操作)
	
88、Ext4 multiblock allocation概念？
	(tips：之前的ext文件系统分配文件block时是一次分配一个block，性能较低)
	
89、SSD的page 、block分别指？
	(tips：page是读写的最小单位，一般为4KB，block由一组page构成，是erase操作的单位)
	
90、SSD中的page可以overwrite吗？
	(tips：不能，如果要修改原page中的数据，需要先找到一个处于clean状态的page，
	然后拷贝原数据，再写入新的page中，原page装填置为stale)
	
91、SSD 中 wear leveling 作用是？
	(tips：SSD中每一个cell都有固定的寿命，如果频繁操作某一些cell，会加快这些cell的失效，
	wear leveling 的作用就是尽可能的将读写操作分布于整个SSD中，而不是集中于某一些cell)
	
92、SSD中，怎么回收处于stale状态的page？
	(tips：TODO)
	
93、SSD中TRIM操作提出的背景？
	(tips：文件系统级数据删除了，但是SSD控制器并没有感知到，可能会影响到后续的文件读写)
	
94、e2fsck在1EB大小的文件系统上，需要119年才能完成

95、Ext系列文件系统中 block group 对于文件系统整体大小的限制？
	(tips：一个block group 128M，一个block group描述符64B，那么一个block group 可以放 128M/64个描述符，
	再乘以128M，整个文件系统的大小就为 128M/64 * 128M)
	
96、Ext4 文件系统中单文件16TB的限制怎么来的？
	(tips：之前stat的结果中，i_blocks表示的是以512字节为单位的扇区数量，现在改为4KBpage的数量，
	那么单个文件的大小就是 2^32 * 4KB)
	
97、Ext4 文件系统inode number多少位？
	(tips：32位)
	
98、Ext3 文件系统的目录组织结构是？
	(tips：有论文指出，ext3文件系统仍然沿用了ext2文件的目录组织结构，即链式结构，
	这个还需要考证，因为有其他论文在描述ext3对ext2的优化时提到ext3已经使用了hash的方法
	通过读代码，确认默认是通过链式结构组织，但是可以通过tunefs 工具修改为HTree结构)
	
99、Ext4 文件系统的 preallocation？
	(tips：对于数据库这种需要持续写入的数据的应用，如果文件系统层能提前分配好写入文件数据需要的block，
	那么会提高上层应用性能)
	
100、fallocate 函数作用？
	(tips：显示的调用preallocate过程，提前分配数据块)
	
101、Ext4 文件系统提供了纳秒级的时间戳

102、ext2/3 文件系统中磁盘上inode大小为 128字节，ext4 文件系统磁盘上inode大小为256字节

103、iCache 和 dCache的作用分别是什么？Cache的 key 是什么？

104、简单描述下FUSE？
	(tips：FUSE是一个用户态文件系统实现，由内核模块和libfuse组成，内核模块抽象了一个fuse文件系统和特殊的/dev/fuse文件，
	用户态的操作通过VFS导向fuse实现，再封装为对应的fuse请求数据写入/dev/fuse，用户态的libfuse轮询读取/dev/fuse文件，
	解析出对应的操作类型和数据，再调用用户自己实现的各个FUSE接口，如open，read，write等，用户态程序返回后，再将结果返回给内核模块，
	内核模块再将结果返回给最初的用户态)
	
105、快速符号链接原理是？
	(tips：其实还是符号链接，只不过链接的具体数据不存放在文件block中，而是inode中，
	这样减少了数据从磁盘的读取操作，更加快速)
	
106、Ext4中，一个文件的多个Extent使用什么数据结构保存？
	(tips：如果文件的extents少于3个，那么以数组的形式保存在inode中，如果再增加，则保存为BTree like的结构，
	这个BTree高度现在固定为2，但也有patch在考虑将这个限制放到3)
	
107、Btrfs 文件系统的一个亮点是提供了文件系统级的快照功能。

108、SSD盘对于原子写的支持？
	(tips：IO请求的路径较长，就算从驱动层发给了硬件，之前的硬件也没有提供原子写的支持
	这里是SSD硬件对于一定长度，一定数据地址对齐的请求，保证了原子的写入支持。)
	
109、Ext3 和 Ext4 文件中Journal的实现和文件系统的实现是两个模块，文件系统本身不知道Journal的存在，文件系统唯一知道的是Transaction的概念
	(tips：对应代码中就是Journal单独实现了JBD)
	
110、文件系统内各个Journal的提交顺序没有严格的保证，更新文件的meta，也是先commit log，然后更新磁盘上对应数据

111、如果文件系统Recover时Crash，那么数据会不一致吗？不会，因为Recover过程中，只是按照log重新操作磁盘上的文件数据，这个操作是幂等的。

112、Ext3 文件系统在代码中指定了一个目录最大的链接数是 32000，也就是说，去掉 . 和 .. 两个特殊目录，那么一个目录下就只能有 31998 个子目录
	这个是在代码中写死的，综合考虑了如果使用链式结构来存储子目录的查找性能。
	
113、Ext4 对于 Ext3 的改进之一是在 Journal层 添加了checksum 机制，利用CRC32 来校验数据的完整性。

114、Ext3 中文件名的最大长度是 254。

115、文件系统中的碎片有哪几种形式？
	(tips：single file fragmentation 、 relevant file fragmentation 、 fress space fragmentation)
	
116、fdatasync 是只同步数据，不同步meta吗？
	(tips：fdatasync也要同步meta，如果meta中只有mtime等不影响真正数据一致性的修改，则会忽略)
	
117、《Kernel support for stack file system》 1、数据的一致性，尤其是底层的文件系统数据有更新时，怎么通知上层的文件系统

118、AuFS多个文件系统文件名冲突时，只显示最上层的文件系统，下层的文件系统文件隐藏，可以通过将底层文件系统设置为RO，
	然后上层文件系统为RDWR，那么利用AuFS的Copy-On-Write特性，可以构建一个类似代码版本管理的系统，
	新的文件都将拷贝到上层文件系统中，而底层的文件系统并没有改变。
	
119、AuFS的删除策略，不同于其他操作，删除操作先删除底层文件系统中的文件，然后再删除上层，因为要避免上层的文件删除成功，
	底层的文件删除失败，导致底层的文件变成visible，引起歧义。
	
120、AuFS为使用带来方便，但是性能是有损失的，尤其是有多个branch时

121、写入文件分配block时，尽量让data block靠近indoe所在的block，让新的indoe和父indoe靠近

122、Ext3 有锁的改进，增加Journal间的并发度

123、Ext3早期版本解决Perallocation的方案是每一个inode维护了一个range，且各个inode之间的range隔离，这个range信息是在内存中保存，
	而不是磁盘上，这样解决了Ext2上的预分配导致的Crash恢复时数据的不一致问题
	
124、Ext4 Extent 树高最高为 5

125、fsync在保证当前文件本身的数据落盘的同时，对于包含这个文件的文件夹的更新则没有保证

126、fsync的man page中有说明，如果磁盘开启了write buffer，则当fsync函数返回时，无法保证数据落盘

127、126中的问题怎么解决？
	(tips：在mount时，添加 barrier 挂载参数，确保在每一次sync时，flush磁盘本身的write buffer
	这个也和具体的硬盘实现有关，需要了解硬件参数和配置)
	
128、blk-mq sheduler？
	(tips：内核为了提高SSD盘的吞吐量而设计的I/O调度器，其核心思想是，每个CPU核都有自己单独的request-queue，
	之前的merge逻辑不变，硬件层也同样有多个dispatch queue，然后尽可能的匹配SSD的处理能力，尤其是 NVMe SSD)
	
129、I/O polling？
	(tips：接上一条，如果外部存储设备的延迟够低，那么可以不用现在的基于中断的模式，而是polling，等待直到I/O完成，
	减少中断次数；如果采用这种技术，那么应用层应该尽可能的少用Non-blocking，因为这又引入了异步模式，需要额外的操作来
	确保命令已经执行完)
	
130、接上一条，有的SSD本身具有中断聚合功能，即尽可能少的中断CPU执行，批量提交I/O完成信息

131、ramfs 和 temfs 有什么区别和联系？
	(tips：首先，这两个文件系统使用的都是内存，free命令中 cache 部分
	不同的是，tmpfs可以限制使用的总大小，且可以通过df 命令查看现在的使用量
	挂载命令 mount -t tmpfs -osize=100M tmpfs /your/mount/point)


// 其他

1、内核和用户空间通信都有哪些方法？

2、服务器1U 2U 中的 U 表示什么？
   （tips：U是高度单位，大约 4.45 cm）

3、CDP技术介绍？
   （tips：持续数据持久化，通过内核层的hook来保证数据的安全性）

4、InfiniBand的带宽能达到多少？ Optic Fabric带宽能达到多少？
	(tips：200G，400G)
	
5、什么是 公网下沉？
	(在一台机器上同时部署两张网卡，一张网卡配置公网IP，另一张配置内网ip)
	
6、 SLC MLC TLC QLC 分表表示什么规格的SSD？

7、内核代码可以使用 -O0 编译吗？为什么？
	(tips：代码中内置了一些需要编译优化的代码片段，在-O0级别下编译会报错)
	
8、__attribute__((noinline)) 标识有什么作用？

9、什么是 DAS NAS SAN？

10、IP SAN 的概念？
	(tips：运行iSCSI协议的存储)
	
11、衡量文件系统性能的工具有哪些？
	(tips：FFSB，PostMark，IOZone，fio工具)


// shell
1、怎么样使alias永久生效？

2、source 命令有什么作用？

3、top 命令中CPU使用率高于100，是什么原因？
	(tips：机器有多个core，显示的是各个CPU利用率之和)
	
4、怎样确定一个shell 命令是builtin的？
	(tips：使用type命令查看)
	
5、怎样让系统生成core 文件？
	(tips：ulimit -c unlimited)
	
6、怎样定制core文件命名规则？
	(tips：/proc/sys/kernel/core_pattern)
